% Filters out high frequency signals for pulse waveform as recorded by an
% oscilloscope. Produces comparison plot with the theoretical pulse 
% produced by optimal control module. Syntax:
% 
%            heterodyne(input_file,carrier_freq,theo_pulse,pulse_len)
%
% Parameters:
%
%   input_file     -  name of the file containting Time-Voltage data,
%                     supplied as a string with .mat extension.
%
%   carrier_freq   -  carrier frequency of the instrument
%
%   theo_pulse     -  name of the file containting pulse that comes out of 
%                     GRAPE, supplied as a string with .mat extension. The
%                     variable within the workspace must be called 'pulse'.
%
%   pulse_len      -  length of the theoretical pulse, in seconds.
%

function heterodyne(input_file,carrier_freq,theo_pulse,pulse_len)

% Import pulse as generated by instrument 
load(input_file,'C1_data','C1_time'); 

% Create arrays
time_grid=double(C1_time');
exp_data =double(C1_data');

% Get carrier frequency in Hz
omega=2*pi*carrier_freq;

% Mix with carrier frequency
real_part=2*exp_data.*cos(omega*time_grid);
imag_part=2*exp_data.*sin(omega*time_grid);

% Define filter
d=designfilt('lowpassfir','SampleRate',2.5e9, ...
             'PassbandFrequency',1e6,'StopbandFrequency',1.5e7, ...
             'PassbandRipple',0.5,'StopbandAttenuation',50);
B = d.Coefficients;

% Apply filter
real_part=gather(fftfilt(gpuArray(B),gpuArray(real_part)));
imag_part=gather(fftfilt(gpuArray(B),gpuArray(imag_part)));

% Save pulse, post heterodyne
pulse_het=[real_part imag_part]; 
pulse_het=transpose(pulse_het); 

% Load theoretical pulse produced by OC
load(theo_pulse,'pulse');

% The last point of pulse is zero
pulse(:,end+1)=0;

% Normalise instrumental readout
max_abs_theo=max(abs(pulse(1,:)+1i*pulse(2,:)));
max_abs_bruk=max(abs(pulse_het(1,:)+1i*pulse_het(2,:)));
pulse_het=pulse_het*(max_abs_theo/max_abs_bruk);

% Work out amplitude
amp_bruk=abs(pulse_het(1,:)+1i*pulse_het(2,:));
amp_theo=abs(pulse(1,:)+1i*pulse(2,:));

% Create time grid for theoretical pulse
time_theo=linspace(0,pulse_len,size(pulse,2));

% Plot instrument read out as it comes
figure(); scale_figure([2.0 1.5]);
subplot(2,2,1); 
plot(time_grid,exp_data); 
kgrid; xlim([0 pulse_len]);
ktitle('wall clock');

% Plot the comparison of amplitudes
subplot(2,2,2);
stairs(time_grid,amp_bruk); hold on;
stairs(time_theo,amp_theo'); 
kgrid; xlim([0 pulse_len]);
ktitle('Pulse amplitude'); 
klegend({'Bruker','OC'},'Location','northwest');

% Plot real part of both signals
subplot(2,2,3); 
stairs(time_grid,pulse_het(1,:)); hold on;
stairs(time_theo,pulse(1,:));
kgrid; xlim([0 pulse_len]);
ktitle('Real component of signal'); 
klegend({'Bruker','OC'},'Location','southwest');

% Plot imaginary part of both signals
subplot(2,2,4); 
stairs(time_grid,pulse_het(2,:)); hold on;
stairs(time_theo,pulse(2,:)); 
kgrid; xlim([0 pulse_len]);
ktitle('Imaginary component of signal'); 
klegend({'Bruker','OC'},'Location','northwest');

ksgtitle('Theoretical vs Bruker comparison')

end
